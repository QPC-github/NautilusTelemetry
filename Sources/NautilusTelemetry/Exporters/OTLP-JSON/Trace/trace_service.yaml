openapi: 3.0.1
info:
  title: opentelemetry/proto/collector/trace/v1/trace_service.proto
  version: version not set
servers:
- url: /
paths:
  /v1/trace:
    post:
      tags:
      - TraceService
      summary: |-
        For performance reasons, it is recommended to keep this RPC
        alive for the entire life of the application.
      operationId: TraceService_Export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ExportTraceServiceRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ExportTraceServiceResponse'
        '429':
          description: Too Many Requests
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runtimeError'
      x-codegen-request-body-name: body
components:
  schemas:
    SpanEvent:
      type: object
      properties:
        time_unix_nano:
          type: string
          description: time_unix_nano is the time the event occurred.
          format: uint64
        name:
          type: string
          description: |-
            name of the event.
            This field is semantically required to be set to non-empty string.
        attributes:
          type: array
          description: attributes is a collection of attribute key/value pairs on
            the event.
          items:
            $ref: '#/components/schemas/v1KeyValue'
        dropped_attributes_count:
          type: integer
          description: |-
            dropped_attributes_count is the number of dropped attributes. If the value is 0,
            then no attributes were dropped.
          format: int64
      description: |-
        Event is a time-stamped annotation of the span, consisting of user-supplied
        text description and key-value pairs.
    SpanLink:
      type: object
      properties:
        trace_id:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: |-
            A unique identifier of a trace that this linked span is part of. The ID is a
            16-byte array.
          format: byte
        span_id:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: A unique identifier for the linked span. The ID is an 8-byte
            array.
          format: byte
        trace_state:
          type: string
          description: The trace_state associated with the link.
        attributes:
          type: array
          description: attributes is a collection of attribute key/value pairs on
            the link.
          items:
            $ref: '#/components/schemas/v1KeyValue'
        dropped_attributes_count:
          type: integer
          description: |-
            dropped_attributes_count is the number of dropped attributes. If the value is 0,
            then no attributes were dropped.
          format: int64
      description: |-
        A pointer from the current span to another span in the same trace or in a
        different trace. For example, this can be used in batching operations,
        where a single batch handler processes multiple requests from different
        traces or when the handler receives a request from a different project.
    SpanSpanKind:
      type: string
      description: |-
        SpanKind is the type of span. Can be used to specify additional relationships between spans
        in addition to a parent/child relationship.

         - SPAN_KIND_UNSPECIFIED: Unspecified. Do NOT use as default.
        Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
         - SPAN_KIND_INTERNAL: Indicates that the span represents an internal operation within an application,
        as opposed to an operation happening at the boundaries. Default value.
         - SPAN_KIND_SERVER: Indicates that the span covers server-side handling of an RPC or other
        remote network request.
         - SPAN_KIND_CLIENT: Indicates that the span describes a request to some remote service.
         - SPAN_KIND_PRODUCER: Indicates that the span describes a producer sending a message to a broker.
        Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
        between producer and consumer spans. A PRODUCER span ends when the message was accepted
        by the broker while the logical processing of the message might span a much longer time.
         - SPAN_KIND_CONSUMER: Indicates that the span describes consumer receiving a message from a broker.
        Like the PRODUCER kind, there is often no direct critical path latency relationship
        between producer and consumer spans.
      default: SPAN_KIND_UNSPECIFIED
      enum:
      - SPAN_KIND_UNSPECIFIED
      - SPAN_KIND_INTERNAL
      - SPAN_KIND_SERVER
      - SPAN_KIND_CLIENT
      - SPAN_KIND_PRODUCER
      - SPAN_KIND_CONSUMER
    StatusDeprecatedStatusCode:
      type: string
      default: DEPRECATED_STATUS_CODE_OK
      enum:
      - DEPRECATED_STATUS_CODE_OK
      - DEPRECATED_STATUS_CODE_CANCELLED
      - DEPRECATED_STATUS_CODE_UNKNOWN_ERROR
      - DEPRECATED_STATUS_CODE_INVALID_ARGUMENT
      - DEPRECATED_STATUS_CODE_DEADLINE_EXCEEDED
      - DEPRECATED_STATUS_CODE_NOT_FOUND
      - DEPRECATED_STATUS_CODE_ALREADY_EXISTS
      - DEPRECATED_STATUS_CODE_PERMISSION_DENIED
      - DEPRECATED_STATUS_CODE_RESOURCE_EXHAUSTED
      - DEPRECATED_STATUS_CODE_FAILED_PRECONDITION
      - DEPRECATED_STATUS_CODE_ABORTED
      - DEPRECATED_STATUS_CODE_OUT_OF_RANGE
      - DEPRECATED_STATUS_CODE_UNIMPLEMENTED
      - DEPRECATED_STATUS_CODE_INTERNAL_ERROR
      - DEPRECATED_STATUS_CODE_UNAVAILABLE
      - DEPRECATED_STATUS_CODE_DATA_LOSS
      - DEPRECATED_STATUS_CODE_UNAUTHENTICATED
    StatusStatusCode:
      title: |-
        For the semantics of status codes see
        https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status
      type: string
      description: |-
        - STATUS_CODE_UNSET: The default status.
         - STATUS_CODE_OK: The Span has been validated by an Application developers or Operator to have
        completed successfully.
         - STATUS_CODE_ERROR: The Span contains an error.
      default: STATUS_CODE_UNSET
      enum:
      - STATUS_CODE_UNSET
      - STATUS_CODE_OK
      - STATUS_CODE_ERROR
    protobufAny:
      type: object
      properties:
        type_url:
          type: string
        value:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    runtimeError:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
    v1AnyValue:
      type: object
      properties:
        string_value:
          type: string
        bool_value:
          type: boolean
        int_value:
          type: string
          format: int64
        double_value:
          type: number
          format: double
        array_value:
          $ref: '#/components/schemas/v1ArrayValue'
        kvlist_value:
          $ref: '#/components/schemas/v1KeyValueList'
        bytes_value:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
      description: |-
        AnyValue is used to represent any type of attribute value. AnyValue may contain a
        primitive value such as a string or integer or it may contain an arbitrary nested
        object containing arrays, key-value lists and primitives.
    v1ArrayValue:
      type: object
      properties:
        values:
          type: array
          description: Array of values. The array may be empty (contain 0 elements).
          items:
            $ref: '#/components/schemas/v1AnyValue'
      description: |-
        ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
        since oneof in AnyValue does not allow repeated fields.
    v1ExportTraceServiceRequest:
      type: object
      properties:
        resource_spans:
          type: array
          description: |-
            An array of ResourceSpans.
            For data coming from a single resource this array will typically contain one
            element. Intermediary nodes (such as OpenTelemetry Collector) that receive
            data from multiple origins typically batch the data before forwarding further and
            in that case this array will contain multiple elements.
          items:
            $ref: '#/components/schemas/v1ResourceSpans'
    v1ExportTraceServiceResponse:
      type: object
    v1InstrumentationLibrary:
      type: object
      properties:
        name:
          type: string
          description: An empty instrumentation library name means the name is unknown.
        version:
          type: string
      description: |-
        InstrumentationLibrary is a message representing the instrumentation library information
        such as the fully qualified name and version.
    v1InstrumentationLibrarySpans:
      type: object
      properties:
        instrumentation_library:
          $ref: '#/components/schemas/v1InstrumentationLibrary'
        spans:
          type: array
          description: A list of Spans that originate from an instrumentation library.
          items:
            $ref: '#/components/schemas/v1Span'
        schema_url:
          type: string
          description: This schema_url applies to all spans and span events in the
            "spans" field.
      description: A collection of Spans produced by an InstrumentationLibrary.
    v1KeyValue:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/v1AnyValue'
      description: |-
        KeyValue is a key-value pair that is used to store Span attributes, Link
        attributes, etc.
    v1KeyValueList:
      type: object
      properties:
        values:
          type: array
          description: |-
            A collection of key/value pairs of key-value pairs. The list may be empty (may
            contain 0 elements).
          items:
            $ref: '#/components/schemas/v1KeyValue'
      description: |-
        KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
        since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
        a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
        avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
        are semantically equivalent.
    v1Resource:
      type: object
      properties:
        attributes:
          type: array
          description: Set of labels that describe the resource.
          items:
            $ref: '#/components/schemas/v1KeyValue'
        dropped_attributes_count:
          type: integer
          description: |-
            dropped_attributes_count is the number of dropped attributes. If the value is 0, then
            no attributes were dropped.
          format: int64
      description: Resource information.
    v1ResourceSpans:
      type: object
      properties:
        resource:
          $ref: '#/components/schemas/v1Resource'
        instrumentation_library_spans:
          type: array
          description: A list of InstrumentationLibrarySpans that originate from a
            resource.
          items:
            $ref: '#/components/schemas/v1InstrumentationLibrarySpans'
        schema_url:
          type: string
          description: |-
            This schema_url applies to the data in the "resource" field. It does not apply
            to the data in the "instrumentation_library_spans" field which have their own
            schema_url field.
      description: A collection of InstrumentationLibrarySpans from a Resource.
    v1Span:
      type: object
      properties:
        trace_id:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: |-
            A unique identifier for a trace. All spans from the same trace share
            the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
            is considered invalid.

            This field is semantically required. Receiver should generate new
            random trace_id if empty or invalid trace_id was received.

            This field is required.
          format: byte
        span_id:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: |-
            A unique identifier for a span within a trace, assigned when the span
            is created. The ID is an 8-byte array. An ID with all zeroes is considered
            invalid.

            This field is semantically required. Receiver should generate new
            random span_id if empty or invalid span_id was received.

            This field is required.
          format: byte
        trace_state:
          type: string
          description: |-
            trace_state conveys information about request position in multiple distributed tracing graphs.
            It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
            See also https://github.com/w3c/distributed-tracing for more details about this field.
        parent_span_id:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: |-
            The `span_id` of this span's parent span. If this is a root span, then this
            field must be empty. The ID is an 8-byte array.
          format: byte
        name:
          type: string
          description: |-
            A description of the span's operation.

            For example, the name can be a qualified method name or a file name
            and a line number where the operation is called. A best practice is to use
            the same display name at the same call point in an application.
            This makes it easier to correlate spans in different traces.

            This field is semantically required to be set to non-empty string.
            When null or empty string received - receiver may use string "name"
            as a replacement. There might be smarted algorithms implemented by
            receiver to fix the empty span name.

            This field is required.
        kind:
          $ref: '#/components/schemas/SpanSpanKind'
        start_time_unix_nano:
          type: string
          description: |-
            start_time_unix_nano is the start time of the span. On the client side, this is the time
            kept by the local machine where the span execution starts. On the server side, this
            is the time when the server's application handler starts running.
            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.

            This field is semantically required and it is expected that end_time >= start_time.
          format: uint64
        end_time_unix_nano:
          type: string
          description: |-
            end_time_unix_nano is the end time of the span. On the client side, this is the time
            kept by the local machine where the span execution ends. On the server side, this
            is the time when the server application handler stops running.
            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.

            This field is semantically required and it is expected that end_time >= start_time.
          format: uint64
        attributes:
          title: |-
            attributes is a collection of key/value pairs. Note, global attributes
            like server name can be set using the resource API. Examples of attributes:
          type: array
          description: |-
            "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
                "/http/server_latency": 300
                "abc.com/myattribute": true
                "abc.com/score": 10.239

            The OpenTelemetry API specification further restricts the allowed value types:
            https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/common.md#attributes
          items:
            $ref: '#/components/schemas/v1KeyValue'
        dropped_attributes_count:
          type: integer
          description: |-
            dropped_attributes_count is the number of attributes that were discarded. Attributes
            can be discarded because their keys are too long or because there are too many
            attributes. If this value is 0, then no attributes were dropped.
          format: int64
        events:
          type: array
          description: events is a collection of Event items.
          items:
            $ref: '#/components/schemas/SpanEvent'
        dropped_events_count:
          type: integer
          description: |-
            dropped_events_count is the number of dropped events. If the value is 0, then no
            events were dropped.
          format: int64
        links:
          type: array
          description: |-
            links is a collection of Links, which are references from this span to a span
            in the same or different trace.
          items:
            $ref: '#/components/schemas/SpanLink'
        dropped_links_count:
          type: integer
          description: |-
            dropped_links_count is the number of dropped links after the maximum size was
            enforced. If this value is 0, then no links were dropped.
          format: int64
        status:
          $ref: '#/components/schemas/v1Status'
      description: |-
        Span represents a single operation within a trace. Spans can be
        nested to form a trace tree. Spans may also be linked to other spans
        from the same or different trace and form graphs. Often, a trace
        contains a root span that describes the end-to-end latency, and one
        or more subspans for its sub-operations. A trace can also contain
        multiple root spans, or none at all. Spans do not need to be
        contiguous - there may be gaps or overlaps between spans in a trace.

        The next available field id is 17.
    v1Status:
      type: object
      properties:
        deprecated_code:
          $ref: '#/components/schemas/StatusDeprecatedStatusCode'
        message:
          type: string
          description: A developer-facing human readable error message.
        code:
          $ref: '#/components/schemas/StatusStatusCode'
      description: |-
        The Status type defines a logical error model that is suitable for different
        programming environments, including REST APIs and RPC APIs.
