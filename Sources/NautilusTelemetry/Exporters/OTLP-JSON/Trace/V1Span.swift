//
// V1Span.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension OTLP {
	/** Span represents a single operation within a trace. Spans can be nested to form a trace tree. Spans may also be linked to other spans from the same or different trace and form graphs. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguous - there may be gaps or overlaps between spans in a trace.  The next available field id is 17. */
	struct V1Span: Codable, Equatable {
		/** A unique identifier for a trace. All spans from the same trace share the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes is considered invalid.  This field is semantically required. Receiver should generate new random trace_id if empty or invalid trace_id was received.  This field is required. */
		internal let traceId: Data?
		/** A unique identifier for a span within a trace, assigned when the span is created. The ID is an 8-byte array. An ID with all zeroes is considered invalid.  This field is semantically required. Receiver should generate new random span_id if empty or invalid span_id was received.  This field is required. */
		internal let spanId: Data?
		/** trace_state conveys information about request position in multiple distributed tracing graphs. It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header See also https://github.com/w3c/distributed-tracing for more details about this field. */
		internal let traceState: String?
		/** The `span_id` of this span's parent span. If this is a root span, then this field must be empty. The ID is an 8-byte array. */
		internal let parentSpanId: Data?
		/** A description of the span's operation.  For example, the name can be a qualified method name or a file name and a line number where the operation is called. A best practice is to use the same display name at the same call point in an application. This makes it easier to correlate spans in different traces.  This field is semantically required to be set to non-empty string. When null or empty string received - receiver may use string \"name\" as a replacement. There might be smarted algorithms implemented by receiver to fix the empty span name.  This field is required. */
		internal let name: String?
		internal let kind: SpanSpanKind?
		/** start_time_unix_nano is the start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.  This field is semantically required and it is expected that end_time >= start_time. */
		internal let startTimeUnixNano: String?
		/** end_time_unix_nano is the end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.  This field is semantically required and it is expected that end_time >= start_time. */
		internal let endTimeUnixNano: String?
		/** \"/http/user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"     \"/http/server_latency\": 300     \"abc.com/myattribute\": true     \"abc.com/score\": 10.239  The OpenTelemetry API specification further restricts the allowed value types: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/common.md#attributes */
		internal let attributes: [V1KeyValue]?
		/** dropped_attributes_count is the number of attributes that were discarded. Attributes can be discarded because their keys are too long or because there are too many attributes. If this value is 0, then no attributes were dropped. */
		internal let droppedAttributesCount: Int64?
		/** events is a collection of Event items. */
		internal let events: [SpanEvent]?
		/** dropped_events_count is the number of dropped events. If the value is 0, then no events were dropped. */
		internal let droppedEventsCount: Int64?
		/** links is a collection of Links, which are references from this span to a span in the same or different trace. */
		internal let links: [SpanLink]?
		/** dropped_links_count is the number of dropped links after the maximum size was enforced. If this value is 0, then no links were dropped. */
		internal let droppedLinksCount: Int64?
		internal let status: V1Status?

		internal init(traceId: Data?, spanId: Data?, traceState: String?, parentSpanId: Data?, name: String?, kind: SpanSpanKind?, startTimeUnixNano: String?, endTimeUnixNano: String?, attributes: [V1KeyValue]?, droppedAttributesCount: Int64?, events: [SpanEvent]?, droppedEventsCount: Int64?, links: [SpanLink]?, droppedLinksCount: Int64?, status: V1Status?) {
			
			self.traceId = traceId
			self.spanId = spanId
			self.traceState = traceState
			self.parentSpanId = parentSpanId
			self.name = name
			self.kind = kind
			self.startTimeUnixNano = startTimeUnixNano
			self.endTimeUnixNano = endTimeUnixNano
			self.attributes = attributes
			self.droppedAttributesCount = droppedAttributesCount
			self.events = events
			self.droppedEventsCount = droppedEventsCount
			self.links = links
			self.droppedLinksCount = droppedLinksCount
			self.status = status
		}

		internal enum CodingKeys: String, CodingKey, CaseIterable {
			case traceId = "trace_id"
			case spanId = "span_id"
			case traceState = "trace_state"
			case parentSpanId = "parent_span_id"
			case name
			case kind
			case startTimeUnixNano = "start_time_unix_nano"
			case endTimeUnixNano = "end_time_unix_nano"
			case attributes
			case droppedAttributesCount = "dropped_attributes_count"
			case events
			case droppedEventsCount = "dropped_events_count"
			case links
			case droppedLinksCount = "dropped_links_count"
			case status
		}
	}
}
