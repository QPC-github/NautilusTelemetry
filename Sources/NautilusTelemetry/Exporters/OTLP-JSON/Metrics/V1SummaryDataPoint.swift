//
// V1SummaryDataPoint.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension OTLP {
	/** SummaryDataPoint is a single data point in a timeseries that describes the time-varying values of a Summary metric. */
	struct V1SummaryDataPoint: Codable, Equatable {
		/** The set of key/value pairs that uniquely identify the timeseries from where this point belongs. The list may be empty (may contain 0 elements). */
		internal let attributes: [V1KeyValue]?
		/** StartTimeUnixNano is optional but strongly encouraged, see the the detailed comments above Metric.  Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. */
		internal let startTimeUnixNano: String?
		/** TimeUnixNano is required, see the detailed comments above Metric.  Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. */
		internal let timeUnixNano: String?
		/** count is the number of values in the population. Must be non-negative. */
		internal let count: String?
		/** sum of the values in the population. If count is zero then this field must be zero.  Note: Sum should only be filled out when measuring non-negative discrete events, and is assumed to be monotonic over the values of these events. Negative events *can* be recorded, but sum should not be filled out when doing so.  This is specifically to enforce compatibility w/ OpenMetrics, see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#summary */
		internal let sum: Double?
		/** (Optional) list of values at different quantiles of the distribution calculated from the current snapshot. The quantiles must be strictly increasing. */
		internal let quantileValues: [SummaryDataPointValueAtQuantile]?
		/** Flags that apply to this specific data point.  See DataPointFlags for the available flags and their meaning. */
		internal let flags: Int64?

		internal init(attributes: [V1KeyValue]?, startTimeUnixNano: String?, timeUnixNano: String?, count: String?, sum: Double?, quantileValues: [SummaryDataPointValueAtQuantile]?, flags: Int64?) {
			self.attributes = attributes
			self.startTimeUnixNano = startTimeUnixNano
			self.timeUnixNano = timeUnixNano
			self.count = count
			self.sum = sum
			self.quantileValues = quantileValues
			self.flags = flags
		}

		internal enum CodingKeys: String, CodingKey, CaseIterable {
			case attributes
			case startTimeUnixNano = "start_time_unix_nano"
			case timeUnixNano = "time_unix_nano"
			case count
			case sum
			case quantileValues = "quantile_values"
			case flags
		}
	}
}
