//
// ExponentialHistogramDataPointBuckets.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension OTLP {
	/** Buckets are a set of bucket counts, encoded in a contiguous array of counts. */
	struct ExponentialHistogramDataPointBuckets: Codable, Equatable {
		/** Offset is the bucket index of the first entry in the bucket_counts array.  Note: This uses a varint encoding as a simple form of compression. */
		internal let offset: Int?
		/** Count is an array of counts, where count[i] carries the count of the bucket at index (offset+i).  count[i] is the count of values greater than or equal to base^(offset+i) and less than base^(offset+i+1).  Note: By contrast, the explicit HistogramDataPoint uses fixed64.  This field is expected to have many buckets, especially zeros, so uint64 has been selected to ensure varint encoding. */
		internal let bucketCounts: [String]?

		internal init(offset: Int?, bucketCounts: [String]?) {
			self.offset = offset
			self.bucketCounts = bucketCounts
		}

		internal enum CodingKeys: String, CodingKey, CaseIterable {
			case offset
			case bucketCounts = "bucket_counts"
		}
	}
}
