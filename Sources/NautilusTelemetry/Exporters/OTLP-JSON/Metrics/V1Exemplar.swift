//
// V1Exemplar.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension OTLP {
	/** A representation of an exemplar, which is a sample input measurement. Exemplars also hold information about the environment when the measurement was recorded, for example the span and trace ID of the active span when the exemplar was recorded. */
	struct V1Exemplar: Codable, Equatable {
		internal let filteredAttributes: [V1KeyValue]?
		/** Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. */
		internal let timeUnixNano: String?
		internal let asDouble: Double?
		internal let asInt: String?
		/** (Optional) Span ID of the exemplar trace. span_id may be missing if the measurement is not recorded inside a trace or if the trace is not sampled. */
		internal let spanId: Data?
		/** (Optional) Trace ID of the exemplar trace. trace_id may be missing if the measurement is not recorded inside a trace or if the trace is not sampled. */
		internal let traceId: Data?

		internal init(filteredAttributes: [V1KeyValue]?, timeUnixNano: String?, asDouble: Double?, asInt: String?, spanId: Data?, traceId: Data?) {
			self.filteredAttributes = filteredAttributes
			self.timeUnixNano = timeUnixNano
			self.asDouble = asDouble
			self.asInt = asInt
			self.spanId = spanId
			self.traceId = traceId
		}

		internal enum CodingKeys: String, CodingKey, CaseIterable {
			case filteredAttributes = "filtered_attributes"
			case timeUnixNano = "time_unix_nano"
			case asDouble = "as_double"
			case asInt = "as_int"
			case spanId = "span_id"
			case traceId = "trace_id"
		}
	}
}
