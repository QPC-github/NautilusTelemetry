//
// V1NumberDataPoint.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension OTLP {
	/** NumberDataPoint is a single data point in a timeseries that describes the time-varying scalar value of a metric. */
	struct V1NumberDataPoint: Codable, Equatable {
		/** The set of key/value pairs that uniquely identify the timeseries from where this point belongs. The list may be empty (may contain 0 elements). */
		internal let attributes: [V1KeyValue]?
		/** StartTimeUnixNano is optional but strongly encouraged, see the the detailed comments above Metric.  Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. */
		internal let startTimeUnixNano: String?
		/** TimeUnixNano is required, see the detailed comments above Metric.  Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. */
		internal let timeUnixNano: String?
		internal let asDouble: Double?
		internal let asInt: String?
		internal let exemplars: [V1Exemplar]?
		/** Flags that apply to this specific data point.  See DataPointFlags for the available flags and their meaning. */
		internal let flags: Int64?

		internal init(attributes: [V1KeyValue]?, startTimeUnixNano: String?, timeUnixNano: String?, asDouble: Double?, asInt: String?, exemplars: [V1Exemplar]?, flags: Int64?) {
			self.attributes = attributes
			self.startTimeUnixNano = startTimeUnixNano
			self.timeUnixNano = timeUnixNano
			self.asDouble = asDouble
			self.asInt = asInt
			self.exemplars = exemplars
			self.flags = flags
		}

		internal enum CodingKeys: String, CodingKey, CaseIterable {
			case attributes
			case startTimeUnixNano = "start_time_unix_nano"
			case timeUnixNano = "time_unix_nano"
			case asDouble = "as_double"
			case asInt = "as_int"
			case exemplars
			case flags
		}
	}
}
