//
// V1AnyValue.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

extension OTLP {
	/** AnyValue is used to represent any type of attribute value. AnyValue may contain a primitive value such as a string or integer or it may contain an arbitrary nested object containing arrays, key-value lists and primitives. */
	struct V1AnyValue: Codable, Equatable {
		internal let stringValue: String?
		internal let boolValue: Bool?
		internal let intValue: String?
		internal let doubleValue: Double?
		internal let arrayValue: V1ArrayValue?
		internal let kvlistValue: V1KeyValueList?
		internal let bytesValue: Data?

		internal init(stringValue: String? = nil, boolValue: Bool? = nil, intValue: String? = nil, doubleValue: Double? = nil, arrayValue: V1ArrayValue? = nil, kvlistValue: V1KeyValueList? = nil, bytesValue: Data? = nil) {
			self.stringValue = stringValue
			self.boolValue = boolValue
			self.intValue = intValue
			self.doubleValue = doubleValue
			self.arrayValue = arrayValue
			self.kvlistValue = kvlistValue
			self.bytesValue = bytesValue
		}

		internal enum CodingKeys: String, CodingKey, CaseIterable {
			case stringValue = "string_value"
			case boolValue = "bool_value"
			case intValue = "int_value"
			case doubleValue = "double_value"
			case arrayValue = "array_value"
			case kvlistValue = "kvlist_value"
			case bytesValue = "bytes_value"
		}
	}
}
